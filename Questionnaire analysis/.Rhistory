rm(list=ls())
sy <- sunspots
plot(sunspots, col='red', xlab='time [year]', ylab='Sunspot number')
print(summary(sy))
print(sd(sy))
boxplot(sy, main='Box-plot diagram', xlab='Sunspot number', ylab='quartiles')
hist(sy, xlab = 'Sunspot number', ylab = 'number of occurances', main = 'Sunspot number histogram')
plot(density(sy), main='Experimental probability density function', xlab = 'Sunspot number', ylab = 'probability of occurence')
qqnorm(sy)
qqline(sy)
install.packages("binom")
install.packages("CauchyCP")
print(shapiro.test(sy))
print(ks.test(sy, 'pnorm'))
hist(sy, xlab = 'Sunspot number', ylab = 'number of occurrences',
main='Sunspot number histogram')
setwd("~/Desktop/UznL")
getwd()
rm(list = ls())
par(mfrow=c(2,2))
curve(dnorm, -3,3, xlab = 'z', ylab = 'Gustoca vjerojatnosti', main='GustoÄ‡a vjerojatnosti')
curve(pnorm, -3,3, xlab = 'z', ylab = 'Kumulativna vjerojatnost', main='Kumulativna vjerojatnost')
curve(qnorm, 0,1, xlab = 'p', ylab = 'Kvantile (z)', main='Kvantile')
y <- rnorm(1000)
hist(y, xlab = 'z', ylab = 'frequency', main = 'slucajna opazanja')
pnorm(0.3, 0, 1)
npr1 <- pnorm(0.3, 0, 1)
curve(npr1, xlab = 'p', ylab = '', main='')
curve(pnorm(0.3, 0, 1), xlab = 'p', ylab = '', main='')
curve(pnorm 0, 1, xlab = 'p', ylab = '', main='')
curve(pnorm, 0, 1, xlab = 'p', ylab = '', main='')
plot(x, dnorm(x, mean = 1, sd = 1), type = "l",
ylim = c(0, 1), ylab = "", lwd = 2, col = "red")
x <- seq(-4, 8, 0.1)
plot(x, dnorm(x, mean = 1, sd = 1), type = "l",
ylim = c(0, 1), ylab = "", lwd = 2, col = "red")
plot(x, pnorm(x, mean = 0, sd = 1), type = "l",
ylim = c(0, 1), ylab = "", lwd = 2, col = "red")
x <- seq(0.3)
plot(x, pnorm(x, mean = 0, sd = 1), type = "l",
ylim = c(0, 1), ylab = "", lwd = 2, col = "red")
dnorm(0.3, 0, 1)
source("~/.active-rstudio-document")
x <- seq(0.01, 4, 0.1)
gd <- dgamma(x, 1, 2)
plot(x, gd, type = 'l', ylab='kum vje', main='kum vje')
y <- rgamma(100, df=29)
y <- rgamma(1000)
y <- rgamma(1000, 2)
install.packages("rmarkdown")
#ucitavanje csv datoteke u prog okvir
covid_data <- read.csv("owid-covid-data.csv", header = TRUE, sep = ',')
source("~/.active-rstudio-document")
library(raster)
HR_Adm_1 <- raster::getData("GADM",
country="HRV", level=1)
k <- subset(HR_Adm_1, NAME_1=="Primorsko-
Goranska")
raster::plot(HR_Adm_1)
raster::plot(k)
tailored_layers <- raster::getData('alt',
country='HRV', mask=TRUE)
plot(tailored_layers, main='Zupanija primorsko-
goranska',
ylab='latitude [deg]', xlab ='longitude [deg]')
lines(k, col='red')
UK_Adm_1 <- raster::getData("GADM",
+                             country="UK", level=1)
UK <- geodata::gadm(country="UK", level=1)
UK <- raster::gadm(country="UK", level=1)
FRA_Adm_1 <- raster::getData("GADM", country="FRA", level=1)
UK_Adm_1 <- raster::getData("GADM", country="UK", level=1)
UK_Adm_1 <- raster::getData("GADM", country="GBR", level=1)
k <- subset(UK_Adm_1, NAME_1=="")
raster::plot(UK_Adm_1)
raster::plot(k)
tailored_layers <- raster::getData('alt', country='GBR', mask=TRUE)
plot(tailored_layers, main='England',ylab='latitude [deg]', xlab ='longitude [deg]'),lines(k, col='red')
plot(tailored_layers, main='England',ylab='latitude [deg]', xlab ='longitude [deg]'),lines(k, col='red')
plot(tailored_layers, main='England',ylab='latitude [deg]', xlab ='longitude [deg]') lines(k, col='red')
plot(tailored_layers, main='England',ylab='latitude [deg]', xlab ='longitude [deg]')
USA_Adm_1 <- raster::getData("GADM", country="USA", level=1)
k <- subset(USA_Adm_1, NAME_1=="Massachusetts")
raster::plot(USA_Adm_1)
raster::plot(k)
tailored_layers <- raster::getData('alt', country='USA', mask=TRUE)
plot(tailored_layers, main='Massachusetts',ylab='latitude [deg]', xlab ='longitude [deg]')
plot(tailored_layers, main='Massachusetts',ylab='latitude [deg]', xlab ='longitude [deg]')
print(latitude[deg])
tailored_layers <- raster::getData('alt', country='GBR', mask=TRUE)
plot(tailored_layers, main='England',ylab='latitude [deg]', xlab ='longitude [deg]')
tailored_layers <- raster::getData('alt', country='USA', mask=TRUE)
plot(tailored_layers, main='Massachusetts',ylab='latitude [deg]', xlab ='longitude [deg]')
library(rlang)
library(vctrs)
library(readxl)
library(writexl)
library(dplyr)
library(gridExtra)
library(ggplot2)
library(ggpubr)
multiplesheets <- function(fname) {
sheets <- readxl::excel_sheets(fname)
tibble <- lapply(sheets, function(x) readxl::read_excel(fname, sheet = x))
data_frame <- lapply(tibble, as.data.frame)
names(data_frame) <- sheets
return(data_frame)
}
etwd('.')
setwd('.')
sheets <- multiplesheets('data/originalData.xlsx')
setwd('.')
sheets <- multiplesheets('/home/ivana/Downloads/UZLProject-main/data/originalData.xlsx')
urinjData   <- sheets[["0"]]
viskovoData <- sheets[["1"]]
urinjData   <- tail(urinjData,   n=nrow(urinjData)-7)
viskovoData <- tail(viskovoData, n=nrow(viskovoData)-7)
colnames(urinjData)   <- c('date', 'time', 'value')
colnames(viskovoData) <- c('date', 'time', 'value')
urinjData   <- transform(urinjData,   value=as.numeric(value))
viskovoData <- transform(viskovoData, value=as.numeric(value))
rm(sheets)
analyze <- function(dataName) {
if (dataName == 'urinj')        tmpData <- urinjData
else if (dataName == 'viskovo') tmpData <- viskovoData
tmpColNames <- c('date', 'quantile_0', 'quantile_25', 'quantile_50', 'quantile_75', 'quantile_100', 'mean', 'variance', 'standard_deviation')
tmpAnalysisDataFrame <- data.frame(matrix(ncol=length(tmpColNames), nrow=0))
colnames(tmpAnalysisDataFrame) <- tmpColNames
for (day in 1:31) {
tmpDate <- gsub(' ', '', paste(toString(day), '.08.2022'))
if (nchar(tmpDate) < 10) tmpDate <- gsub(' ', '', paste('0', tmpDate))
tmpDayData <- tmpData[tmpData$date == tmpDate & !is.na(tmpData$value),]
quant  <- quantile(tmpDayData$value)
mean   <- mean(tmpDayData$value)
varian <- var(tmpDayData$value)
stdev  <- sd(tmpDayData$value)
tmpAnalysisDataFrame[nrow(tmpAnalysisDataFrame) + 1,] <- c(tmpDate, quant[1], quant[2], quant[3], quant[4], quant[5], mean, varian, stdev)
graph  <- ggplot(data=tmpDayData, aes(x=time, y=value)) +
geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) +
labs(x='Time',
y='Concentration \r\nof floating particles < 2.5 mm')
hist   <- ggplot(tmpDayData, aes(x=value)) +
geom_histogram(bins=30) +
labs(x='Concentration of floating particles < 2.5 mm',
y='Frequency')
boxplt <- ggplot(tmpDayData, aes(y=value)) +
geom_boxplot()
densit <- ggplot(tmpDayData, aes(x=value)) +
geom_density()
png(file=gsub(' ', '', paste('plots/', dataName, '/', tmpDate, '.png')),
width=550, height=550)
plot(ggarrange(graph, hist, boxplt, densit,
labels=c('A', 'B', 'C', 'D'),
ncol=2, nrow=2) +
theme(plot.margin=margin(0.5, 0.5, 0.5, 0.5, 'cm')))
dev.off()
}
print(quantile(tmpDayData$value))
graph  <- ggplot(data=tmpData, aes(x=date, y=variance)) +
geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) +
labs(x='Time',
y='Concentration \r\nof floating particles < 2.5 mm')
hist   <- ggplot(tmpData, aes(x=variance)) +
geom_histogram(bins=30) +
labs(x='Concentration of floating particles < 2.5 mm',
y='Frequency')
boxplt <- ggplot(tmpData, aes(y=variance)) +
geom_boxplot()
densit <- ggplot(tmpData, aes(x=variance)) +
geom_density()
png(file=gsub(' ', '', paste('plots/', dataName, '/', 'variance.png')),
width=550, height=550)
plot(ggarrange(graph, hist, boxplt, densit,
labels=c('A', 'B', 'C', 'D'),
ncol=2, nrow=2) +
theme(plot.margin=margin(0.5, 0.5, 0.5, 0.5, 'cm')))
dev.off()
}
View(analyze)
View(analyze)
View(multiplesheets)
print(quant)
rm(list = ls())
setwd("~/HCI_project/Questionnaire analysis")
questionnaire_data <- read.csv('HCI_questionnaire.csv', header=TRUE, sep=",")
#demographic data
ages <- questionnaire_data$Age
gender <- questionnaire_data$Gender
#relevant answers
head_frustration <- questionnaire_data$Head_controller_frustration
head_satisfaction <- questionnaire_data$Head_controller_satisfaction
gesture_frustration <- questionnaire_data$Gesture_controller_frustration
gesture_satisfaction <- questionnaire_data$Gesture_controller_satisfaction
#descriptive statistics (mean, median, standard deviation)
mean_age <- mean(ages)
mean_head_frustration <- mean(head_frustration)
median_head_frustration <- median(head_frustration)
sd_head_frustration <- sd(head_frustration)
mean_head_satisfaction <- mean(head_satisfaction)
median_head_satisfaction <- median(head_satisfaction)
sd_head_satisfaction <- sd(head_satisfaction)
mean_gesture_frustration <- mean(gesture_frustration)
median_gesture_frustration <- median(gesture_frustration)
sd_gesture_frustration <- sd(gesture_frustration)
mean_gesture_satisfaction <- mean(gesture_satisfaction)
median_gesture_satisfaction <- median(gesture_satisfaction)
sd_gesture_satisfaction <- sd(gesture_satisfaction)
print(mean_age)
print(mean_head_frustration)
print(median_head_frustration)
print(sd_head_frustration)
print(mean_head_satisfaction)
print(median_head_satisfaction)
print(sd_head_satisfaction)
print(mean_gesture_frustration)
print(median_gesture_frustration)
print(sd_gesture_frustration)
print(mean_gesture_satisfaction)
print(median_gesture_satisfaction)
print(sd_gesture_satisfaction)
#visualization of descriptive statistics
boxplot_satisfaction <- list(head = head_satisfaction, gesture = gesture_satisfaction)
boxplot(boxplot_satisfaction, col = c("yellow", "blue"), names = c("Head control", "Gesture control"),
main = "Boxplots of levels of satisfaction", ylab = "")
boxplot_frustration <- list(head = head_frustration, gesture = gesture_frustration)
boxplot(boxplot_frustration, col = c("yellow", "blue"), names = c("Head control", "Gesture control"),
main = "Boxplots of levels of frustration", ylab = "")
#check if data is normally distributed
print(shapiro.test(head_frustration)) #not normally distributed
print(shapiro.test(head_satisfaction)) #not normally distributed
print(shapiro.test(gesture_frustration)) #normally distributed
print(shapiro.test(gesture_satisfaction)) #normally distributed
#statistical tests
print(wilcox.test(head_frustration, gesture_frustration, paired = TRUE))
print(wilcox.test(head_satisfaction, gesture_satisfaction, paired = TRUE))
print(shapiro.test(head_frustration)) #not normally distributed
print(shapiro.test(head_satisfaction)) #not normally distributed
print(shapiro.test(gesture_frustration)) #normally distributed
print(shapiro.test(gesture_satisfaction)) #normally distributed
